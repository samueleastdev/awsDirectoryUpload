import { __assign, __awaiter, __generator } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
/**
 * A SigV4-compatible signer for S3 service. In order to support SigV4a algorithm according to the operation input
 * dynamically, the signer wraps native module SigV4a signer and JS SigV4 signer. It signs the request with SigV4a
 * algorithm if the request needs to be signed with `*` region. Otherwise, it signs the request with normal SigV4
 * signer.
 * Note that SigV4a signer is only supported in Node.js now because it depends on a native dependency.
 * @private
 */
var S3SignatureV4 = /** @class */ (function () {
    function S3SignatureV4(options) {
        this.sigv4Signer = new SignatureV4(options);
        this.signerOptions = options;
    }
    S3SignatureV4.prototype.sign = function (requestToSign, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options.signingRegion === "*")) return [3 /*break*/, 2];
                        if (this.signerOptions.runtime !== "node")
                            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                        return [4 /*yield*/, this.getSigv4aSigner()];
                    case 1: return [2 /*return*/, (_a.sent()).sign(requestToSign, options)];
                    case 2: return [2 /*return*/, this.sigv4Signer.sign(requestToSign, options)];
                }
            });
        });
    };
    S3SignatureV4.prototype.presign = function (originalRequest, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(options.signingRegion === "*")) return [3 /*break*/, 2];
                        if (this.signerOptions.runtime !== "node")
                            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                        return [4 /*yield*/, this.getSigv4aSigner()];
                    case 1: return [2 /*return*/, (_a.sent()).presign(originalRequest, options)];
                    case 2: return [2 /*return*/, this.sigv4Signer.presign(originalRequest, options)];
                }
            });
        });
    };
    S3SignatureV4.prototype.getSigv4aSigner = function () {
        return __awaiter(this, void 0, void 0, function () {
            var CrtSignerV4_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.sigv4aSigner) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, import("@aws-sdk/signature-v4-crt")];
                    case 2:
                        CrtSignerV4_1 = (_a.sent()).CrtSignerV4;
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        e_1.message =
                            e_1.message + "\nPlease check if you have installed \"@aws-sdk/signature-v4-crt\" package explicitly. \n" +
                                "For more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues";
                        throw e_1;
                    case 4:
                        this.sigv4aSigner = new CrtSignerV4_1(__assign(__assign({}, this.signerOptions), { signingAlgorithm: 1 }));
                        _a.label = 5;
                    case 5: return [2 /*return*/, this.sigv4aSigner];
                }
            });
        });
    };
    return S3SignatureV4;
}());
export { S3SignatureV4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUEwQyxNQUFNLHVCQUF1QixDQUFDO0FBZTVGOzs7Ozs7O0dBT0c7QUFDSDtJQUtFLHVCQUFZLE9BQXVCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQUVZLDRCQUFJLEdBQWpCLFVBQWtCLGFBQTBCLEVBQUUsT0FBcUM7UUFBckMsd0JBQUEsRUFBQSxZQUFxQzs7Ozs7NkJBQzdFLENBQUEsT0FBTyxDQUFDLGFBQWEsS0FBSyxHQUFHLENBQUEsRUFBN0Isd0JBQTZCO3dCQUMvQixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLE1BQU07NEJBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQzt3QkFDMUcscUJBQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFBOzRCQUFwQyxzQkFBTyxDQUFDLFNBQTRCLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFDOzRCQUVyRSxzQkFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUM7Ozs7S0FDdEQ7SUFFWSwrQkFBTyxHQUFwQixVQUFxQixlQUE0QixFQUFFLE9BQXdDO1FBQXhDLHdCQUFBLEVBQUEsWUFBd0M7Ozs7OzZCQUNyRixDQUFBLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxDQUFBLEVBQTdCLHdCQUE2Qjt3QkFDL0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxNQUFNOzRCQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLDhGQUE4RixDQUFDLENBQUM7d0JBQzFHLHFCQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBQTs0QkFBcEMsc0JBQU8sQ0FBQyxTQUE0QixDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBQzs0QkFFMUUsc0JBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFDOzs7O0tBQzNEO0lBRWEsdUNBQWUsR0FBN0I7Ozs7Ozs2QkFDTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQWxCLHdCQUFrQjs7Ozt3QkFHSCxxQkFBTSxNQUFNLENBQUMsMkJBQTJCLENBQUMsRUFBQTs7d0JBQXhELGFBQVcsR0FBRyxDQUFDLFNBQXlDLENBQUMsQ0FBQyxXQUFXLENBQUM7Ozs7d0JBRXRFLEdBQUMsQ0FBQyxPQUFPOzRCQUNKLEdBQUMsQ0FBQyxPQUFPLDhGQUF5RjtnQ0FDckcscUZBQXFGLENBQUM7d0JBQ3hGLE1BQU0sR0FBQyxDQUFDOzt3QkFFVixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksYUFBVyx1QkFDOUIsSUFBSSxDQUFDLGFBQWEsS0FDckIsZ0JBQWdCLEVBQUUsQ0FBQyxJQUNuQixDQUFDOzs0QkFFTCxzQkFBTyxJQUFJLENBQUMsWUFBWSxFQUFDOzs7O0tBQzFCO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBOUNELElBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2lnbmF0dXJlVjQsIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCwgU2lnbmF0dXJlVjRJbml0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NFwiO1xuaW1wb3J0IHR5cGUgeyBDcnRTaWduZXJWNCwgQ3J0U2lnbmVyVjRJbml0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIjtcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBSZXF1ZXN0UHJlc2lnbmVyLFxuICBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyxcbiAgUmVxdWVzdFNpZ25lcixcbiAgUmVxdWVzdFNpZ25pbmdBcmd1bWVudHMsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBTM1NpZ25lclY0SW5pdCA9IFNpZ25hdHVyZVY0SW5pdCAmXG4gIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCAmIHtcbiAgICBydW50aW1lPzogc3RyaW5nO1xuICB9O1xuXG4vKipcbiAqIEEgU2lnVjQtY29tcGF0aWJsZSBzaWduZXIgZm9yIFMzIHNlcnZpY2UuIEluIG9yZGVyIHRvIHN1cHBvcnQgU2lnVjRhIGFsZ29yaXRobSBhY2NvcmRpbmcgdG8gdGhlIG9wZXJhdGlvbiBpbnB1dFxuICogZHluYW1pY2FsbHksIHRoZSBzaWduZXIgd3JhcHMgbmF0aXZlIG1vZHVsZSBTaWdWNGEgc2lnbmVyIGFuZCBKUyBTaWdWNCBzaWduZXIuIEl0IHNpZ25zIHRoZSByZXF1ZXN0IHdpdGggU2lnVjRhXG4gKiBhbGdvcml0aG0gaWYgdGhlIHJlcXVlc3QgbmVlZHMgdG8gYmUgc2lnbmVkIHdpdGggYCpgIHJlZ2lvbi4gT3RoZXJ3aXNlLCBpdCBzaWducyB0aGUgcmVxdWVzdCB3aXRoIG5vcm1hbCBTaWdWNFxuICogc2lnbmVyLlxuICogTm90ZSB0aGF0IFNpZ1Y0YSBzaWduZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcyBub3cgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIGEgbmF0aXZlIGRlcGVuZGVuY3kuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgUzNTaWduYXR1cmVWNCBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RTaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ3Y0U2lnbmVyOiBTaWduYXR1cmVWNDtcbiAgcHJpdmF0ZSBzaWd2NGFTaWduZXI/OiBDcnRTaWduZXJWNDtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWduZXJPcHRpb25zOiBTM1NpZ25lclY0SW5pdDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBTM1NpZ25lclY0SW5pdCkge1xuICAgIHRoaXMuc2lndjRTaWduZXIgPSBuZXcgU2lnbmF0dXJlVjQob3B0aW9ucyk7XG4gICAgdGhpcy5zaWduZXJPcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaWduKHJlcXVlc3RUb1NpZ246IEh0dHBSZXF1ZXN0LCBvcHRpb25zOiBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyA9IHt9KTogUHJvbWlzZTxIdHRwUmVxdWVzdD4ge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICBpZiAodGhpcy5zaWduZXJPcHRpb25zLnJ1bnRpbWUgIT09IFwibm9kZVwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHJlcXVlc3QgcmVxdWlyZXMgc2lnbmluZyB3aXRoIFNpZ1Y0QXN5bW1ldHJpYyBhbGdvcml0aG0uIEl0J3Mgb25seSBhdmFpbGFibGUgaW4gTm9kZS5qc1wiKTtcbiAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRTaWd2NGFTaWduZXIoKSkuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRTaWduZXIuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwcmVzaWduKG9yaWdpbmFsUmVxdWVzdDogSHR0cFJlcXVlc3QsIG9wdGlvbnM6IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge30pOiBQcm9taXNlPEh0dHBSZXF1ZXN0PiB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICh0aGlzLnNpZ25lck9wdGlvbnMucnVudGltZSAhPT0gXCJub2RlXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldFNpZ3Y0YVNpZ25lcigpKS5wcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0U2lndjRhU2lnbmVyKCk6IFByb21pc2U8Q3J0U2lnbmVyVjQ+IHtcbiAgICBpZiAoIXRoaXMuc2lndjRhU2lnbmVyKSB7XG4gICAgICBsZXQgQ3J0U2lnbmVyVjQ6IG5ldyAob3B0aW9uczogQ3J0U2lnbmVyVjRJbml0ICYgU2lnbmF0dXJlVjRDcnlwdG9Jbml0KSA9PiBDcnRTaWduZXJWNDtcbiAgICAgIHRyeSB7XG4gICAgICAgIENydFNpZ25lclY0ID0gKGF3YWl0IGltcG9ydChcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIikpLkNydFNpZ25lclY0O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlLm1lc3NhZ2UgPVxuICAgICAgICAgIGAke2UubWVzc2FnZX1cXG5QbGVhc2UgY2hlY2sgaWYgeW91IGhhdmUgaW5zdGFsbGVkIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0LWNydFwiIHBhY2thZ2UgZXhwbGljaXRseS4gXFxuYCArXG4gICAgICAgICAgXCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgZ28gdG8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzI2tub3duLWlzc3Vlc1wiO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgdGhpcy5zaWd2NGFTaWduZXIgPSBuZXcgQ3J0U2lnbmVyVjQoe1xuICAgICAgICAuLi50aGlzLnNpZ25lck9wdGlvbnMsXG4gICAgICAgIHNpZ25pbmdBbGdvcml0aG06IDEsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRhU2lnbmVyO1xuICB9XG59XG4iXX0=