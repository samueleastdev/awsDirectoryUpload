"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplyMd5BodyChecksumPlugin = exports.applyMd5BodyChecksumMiddlewareOptions = exports.applyMd5BodyChecksumMiddleware = void 0;
const is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
const protocol_http_1 = require("@aws-sdk/protocol-http");
const applyMd5BodyChecksumMiddleware = (options) => (next) => async (args) => {
    let { request } = args;
    if (protocol_http_1.HttpRequest.isInstance(request)) {
        const { body, headers } = request;
        if (!hasHeader("content-md5", headers)) {
            let digest;
            if (body === undefined || typeof body === "string" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {
                const hash = new options.md5();
                hash.update(body || "");
                digest = hash.digest();
            }
            else {
                digest = options.streamHasher(options.md5, body);
            }
            request = {
                ...request,
                headers: {
                    ...headers,
                    "content-md5": options.base64Encoder(await digest),
                },
            };
        }
    }
    return next({
        ...args,
        request,
    });
};
exports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;
exports.applyMd5BodyChecksumMiddlewareOptions = {
    name: "applyMd5BodyChecksumMiddleware",
    step: "build",
    tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"],
    override: true,
};
const getApplyMd5BodyChecksumPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(exports.applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);
    },
});
exports.getApplyMd5BodyChecksumPlugin = getApplyMd5BodyChecksumPlugin;
const hasHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBeUQ7QUFDekQsMERBQXFEO0FBYzlDLE1BQU0sOEJBQThCLEdBQ3pDLENBQUMsT0FBc0MsRUFBNkIsRUFBRSxDQUN0RSxDQUFnQyxJQUErQixFQUE2QixFQUFFLENBQzlGLEtBQUssRUFBRSxJQUFnQyxFQUF1QyxFQUFFO0lBQzlFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSwyQkFBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUN0QyxJQUFJLE1BQTJCLENBQUM7WUFDaEMsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLCtCQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JHLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN4QjtpQkFBTTtnQkFDTCxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2xEO1lBRUQsT0FBTyxHQUFHO2dCQUNSLEdBQUcsT0FBTztnQkFDVixPQUFPLEVBQUU7b0JBQ1AsR0FBRyxPQUFPO29CQUNWLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sTUFBTSxDQUFDO2lCQUNuRDthQUNGLENBQUM7U0FDSDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDVixHQUFHLElBQUk7UUFDUCxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBOUJTLFFBQUEsOEJBQThCLGtDQThCdkM7QUFFUyxRQUFBLHFDQUFxQyxHQUF3QjtJQUN4RSxJQUFJLEVBQUUsZ0NBQWdDO0lBQ3RDLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxDQUFDO0lBQzFDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxNQUFxQyxFQUF1QixFQUFFLENBQUMsQ0FBQztJQUM1RyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLHNDQUE4QixDQUFDLE1BQU0sQ0FBQyxFQUFFLDZDQUFxQyxDQUFDLENBQUM7SUFDakcsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEsNkJBQTZCLGlDQUl2QztBQUVILE1BQU0sU0FBUyxHQUFHLENBQUMsWUFBb0IsRUFBRSxPQUFrQixFQUFXLEVBQUU7SUFDdEUsWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxLQUFLLE1BQU0sVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDN0MsSUFBSSxZQUFZLEtBQUssVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzdDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCJAYXdzLXNkay9pcy1hcnJheS1idWZmZXJcIjtcbmltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7XG4gIEJ1aWxkSGFuZGxlcixcbiAgQnVpbGRIYW5kbGVyQXJndW1lbnRzLFxuICBCdWlsZEhhbmRsZXJPcHRpb25zLFxuICBCdWlsZEhhbmRsZXJPdXRwdXQsXG4gIEJ1aWxkTWlkZGxld2FyZSxcbiAgSGVhZGVyQmFnLFxuICBNZXRhZGF0YUJlYXJlcixcbiAgUGx1Z2dhYmxlLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgTWQ1Qm9keUNoZWNrc3VtUmVzb2x2ZWRDb25maWcgfSBmcm9tIFwiLi9tZDVDb25maWd1cmF0aW9uXCI7XG5cbmV4cG9ydCBjb25zdCBhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmUgPVxuICAob3B0aW9uczogTWQ1Qm9keUNoZWNrc3VtUmVzb2x2ZWRDb25maWcpOiBCdWlsZE1pZGRsZXdhcmU8YW55LCBhbnk+ID0+XG4gIDxPdXRwdXQgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlcj4obmV4dDogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0Pik6IEJ1aWxkSGFuZGxlcjxhbnksIE91dHB1dD4gPT5cbiAgYXN5bmMgKGFyZ3M6IEJ1aWxkSGFuZGxlckFyZ3VtZW50czxhbnk+KTogUHJvbWlzZTxCdWlsZEhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGxldCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKEh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgICAgIGlmICghaGFzSGVhZGVyKFwiY29udGVudC1tZDVcIiwgaGVhZGVycykpIHtcbiAgICAgICAgbGV0IGRpZ2VzdDogUHJvbWlzZTxVaW50OEFycmF5PjtcbiAgICAgICAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkgfHwgaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgb3B0aW9ucy5tZDUoKTtcbiAgICAgICAgICBoYXNoLnVwZGF0ZShib2R5IHx8IFwiXCIpO1xuICAgICAgICAgIGRpZ2VzdCA9IGhhc2guZGlnZXN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlnZXN0ID0gb3B0aW9ucy5zdHJlYW1IYXNoZXIob3B0aW9ucy5tZDUsIGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAuLi5yZXF1ZXN0LFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgICBcImNvbnRlbnQtbWQ1XCI6IG9wdGlvbnMuYmFzZTY0RW5jb2Rlcihhd2FpdCBkaWdlc3QpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIC4uLmFyZ3MsXG4gICAgICByZXF1ZXN0LFxuICAgIH0pO1xuICB9O1xuXG5leHBvcnQgY29uc3QgYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlT3B0aW9uczogQnVpbGRIYW5kbGVyT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmVcIixcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJTRVRfQ09OVEVOVF9NRDVcIiwgXCJCT0RZX0NIRUNLU1VNXCJdLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBcHBseU1kNUJvZHlDaGVja3N1bVBsdWdpbiA9IChjb25maWc6IE1kNUJvZHlDaGVja3N1bVJlc29sdmVkQ29uZmlnKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmUoY29uZmlnKSwgYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcblxuY29uc3QgaGFzSGVhZGVyID0gKHNvdWdodEhlYWRlcjogc3RyaW5nLCBoZWFkZXJzOiBIZWFkZXJCYWcpOiBib29sZWFuID0+IHtcbiAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdfQ==