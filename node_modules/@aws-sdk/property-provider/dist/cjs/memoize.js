"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.memoize = void 0;
const memoize = (provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    // Wrapper over supplied provider with side effect to handle concurrent invocation.
    const coalesceProvider = async () => {
        if (!pending) {
            pending = provider();
        }
        try {
            resolved = await pending;
            hasResult = true;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        // This is a static memoization; no need to incorporate refreshing
        return async () => {
            if (!hasResult) {
                resolved = await coalesceProvider();
            }
            return resolved;
        };
    }
    let isConstant = false;
    return async () => {
        if (!hasResult) {
            resolved = await coalesceProvider();
        }
        if (isConstant) {
            return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};
exports.memoize = memoize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZW1vaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTBDTyxNQUFNLE9BQU8sR0FBb0IsQ0FDdEMsUUFBcUIsRUFDckIsU0FBb0MsRUFDcEMsZUFBMEMsRUFDN0IsRUFBRTtJQUNmLElBQUksUUFBVyxDQUFDO0lBQ2hCLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLFNBQWtCLENBQUM7SUFDdkIsbUZBQW1GO0lBQ25GLE1BQU0sZ0JBQWdCLEdBQWdCLEtBQUssSUFBSSxFQUFFO1FBQy9DLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLEdBQUcsUUFBUSxFQUFFLENBQUM7U0FDdEI7UUFDRCxJQUFJO1lBQ0YsUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDO1lBQ3pCLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDbEI7Z0JBQVM7WUFDUixPQUFPLEdBQUcsU0FBUyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1FBQzNCLGtFQUFrRTtRQUNsRSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2QsUUFBUSxHQUFHLE1BQU0sZ0JBQWdCLEVBQUUsQ0FBQzthQUNyQztZQUNELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztLQUNIO0lBRUQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBRXZCLE9BQU8sS0FBSyxJQUFJLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLFFBQVEsR0FBRyxNQUFNLGdCQUFnQixFQUFFLENBQUM7U0FDckM7UUFDRCxJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxlQUFlLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakQsVUFBVSxHQUFHLElBQUksQ0FBQztZQUNsQixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQXBEVyxRQUFBLE9BQU8sV0FvRGxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW50ZXJmYWNlIE1lbW9pemVPdmVybG9hZCB7XG4gIC8qKlxuICAgKlxuICAgKiBEZWNvcmF0ZXMgYSBwcm92aWRlciBmdW5jdGlvbiB3aXRoIGVpdGhlciBzdGF0aWMgbWVtb2l6YXRpb24uXG4gICAqXG4gICAqIFRvIGNyZWF0ZSBhIHN0YXRpY2FsbHkgbWVtb2l6ZWQgcHJvdmlkZXIsIHN1cHBseSBhIHByb3ZpZGVyIGFzIHRoZSBvbmx5XG4gICAqIGFyZ3VtZW50IHRvIHRoaXMgZnVuY3Rpb24uIFRoZSBwcm92aWRlciB3aWxsIGJlIGludm9rZWQgb25jZSwgYW5kIGFsbFxuICAgKiBpbnZvY2F0aW9ucyBvZiB0aGUgcHJvdmlkZXIgcmV0dXJuZWQgYnkgYG1lbW9pemVgIHdpbGwgcmV0dXJuIHRoZSBzYW1lXG4gICAqIHByb21pc2Ugb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gcHJvdmlkZXIgVGhlIHByb3ZpZGVyIHdob3NlIHJlc3VsdCBzaG91bGQgYmUgY2FjaGVkIGluZGVmaW5pdGVseS5cbiAgICovXG4gIDxUPihwcm92aWRlcjogUHJvdmlkZXI8VD4pOiBQcm92aWRlcjxUPjtcblxuICAvKipcbiAgICogRGVjb3JhdGVzIGEgcHJvdmlkZXIgZnVuY3Rpb24gd2l0aCByZWZyZXNoaW5nIG1lbW9pemF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvdmlkZXIgICAgICAgICAgVGhlIHByb3ZpZGVyIHdob3NlIHJlc3VsdCBzaG91bGQgYmUgY2FjaGVkLlxuICAgKiBAcGFyYW0gaXNFeHBpcmVkICAgICAgICAgQSBmdW5jdGlvbiB0aGF0IHdpbGwgZXZhbHVhdGUgdGhlIHJlc29sdmVkIHZhbHVlIGFuZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGlmIGl0IGlzIGV4cGlyZWQuIEZvciBleGFtcGxlLCB3aGVuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1vaXppbmcgQVdTIGNyZWRlbnRpYWwgcHJvdmlkZXJzLCB0aGlzIGZ1bmN0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgcmV0dXJuIGB0cnVlYCB3aGVuIHRoZSBjcmVkZW50aWFsJ3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb24gaXMgaW4gdGhlIHBhc3QgKG9yIHZlcnkgbmVhciBmdXR1cmUpIGFuZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAqIEBwYXJhbSByZXF1aXJlc1JlZnJlc2ggICBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBldmFsdWF0ZSB0aGUgcmVzb2x2ZWQgdmFsdWUgYW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmUgaWYgaXQgcmVwcmVzZW50cyBzdGF0aWMgdmFsdWUgb3Igb25lIHRoYXRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgZXZlbnR1YWxseSBuZWVkIHRvIGJlIHJlZnJlc2hlZC4gRm9yIGV4YW1wbGUsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBBV1MgY3JlZGVudGlhbHMgdGhhdCBoYXZlIG5vIGRlZmluZWQgZXhwaXJhdGlvbiB3aWxsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBuZXZlciBuZWVkIHRvIGJlIHJlZnJlc2hlZCwgc28gdGhpcyBmdW5jdGlvbiB3b3VsZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cnVlYCBpZiB0aGUgY3JlZGVudGlhbHMgcmVzb2x2ZWQgYnkgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nIHByb3ZpZGVyIGhhZCBhbiBleHBpcmF0aW9uIGFuZCBgZmFsc2VgXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UuXG4gICAqL1xuICA8VD4oXG4gICAgcHJvdmlkZXI6IFByb3ZpZGVyPFQ+LFxuICAgIGlzRXhwaXJlZDogKHJlc29sdmVkOiBUKSA9PiBib29sZWFuLFxuICAgIHJlcXVpcmVzUmVmcmVzaD86IChyZXNvbHZlZDogVCkgPT4gYm9vbGVhblxuICApOiBQcm92aWRlcjxUPjtcbn1cblxuZXhwb3J0IGNvbnN0IG1lbW9pemU6IE1lbW9pemVPdmVybG9hZCA9IDxUPihcbiAgcHJvdmlkZXI6IFByb3ZpZGVyPFQ+LFxuICBpc0V4cGlyZWQ/OiAocmVzb2x2ZWQ6IFQpID0+IGJvb2xlYW4sXG4gIHJlcXVpcmVzUmVmcmVzaD86IChyZXNvbHZlZDogVCkgPT4gYm9vbGVhblxuKTogUHJvdmlkZXI8VD4gPT4ge1xuICBsZXQgcmVzb2x2ZWQ6IFQ7XG4gIGxldCBwZW5kaW5nOiBQcm9taXNlPFQ+IHwgdW5kZWZpbmVkO1xuICBsZXQgaGFzUmVzdWx0OiBib29sZWFuO1xuICAvLyBXcmFwcGVyIG92ZXIgc3VwcGxpZWQgcHJvdmlkZXIgd2l0aCBzaWRlIGVmZmVjdCB0byBoYW5kbGUgY29uY3VycmVudCBpbnZvY2F0aW9uLlxuICBjb25zdCBjb2FsZXNjZVByb3ZpZGVyOiBQcm92aWRlcjxUPiA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBwcm92aWRlcigpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBwZW5kaW5nO1xuICAgICAgaGFzUmVzdWx0ID0gdHJ1ZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVkO1xuICB9O1xuXG4gIGlmIChpc0V4cGlyZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFRoaXMgaXMgYSBzdGF0aWMgbWVtb2l6YXRpb247IG5vIG5lZWQgdG8gaW5jb3Jwb3JhdGUgcmVmcmVzaGluZ1xuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIWhhc1Jlc3VsdCkge1xuICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xuICB9XG5cbiAgbGV0IGlzQ29uc3RhbnQgPSBmYWxzZTtcblxuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghaGFzUmVzdWx0KSB7XG4gICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICB9XG4gICAgaWYgKGlzQ29uc3RhbnQpIHtcbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9XG5cbiAgICBpZiAocmVxdWlyZXNSZWZyZXNoICYmICFyZXF1aXJlc1JlZnJlc2gocmVzb2x2ZWQpKSB7XG4gICAgICBpc0NvbnN0YW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9XG4gICAgaWYgKGlzRXhwaXJlZChyZXNvbHZlZCkpIHtcbiAgICAgIGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVkO1xuICB9O1xufTtcbiJdfQ==