import { __values } from "tslib";
import { escapeUri } from "@aws-sdk/util-uri-escape";
import { SIGNATURE_HEADER } from "./constants";
/**
 * @private
 */
export var getCanonicalQuery = function (_a) {
    var e_1, _b;
    var _c = _a.query, query = _c === void 0 ? {} : _c;
    var keys = [];
    var serialized = {};
    var _loop_1 = function (key) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
            return "continue";
        }
        keys.push(key);
        var value = query[key];
        if (typeof value === "string") {
            serialized[key] = escapeUri(key) + "=" + escapeUri(value);
        }
        else if (Array.isArray(value)) {
            serialized[key] = value
                .slice(0)
                .sort()
                .reduce(function (encoded, value) { return encoded.concat([escapeUri(key) + "=" + escapeUri(value)]); }, [])
                .join("&");
        }
    };
    try {
        for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
            var key = _e.value;
            _loop_1(key);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return keys
        .map(function (key) { return serialized[key]; })
        .filter(function (serialized) { return serialized; }) // omit any falsy values
        .join("&");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2Fub25pY2FsUXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2V0Q2Fub25pY2FsUXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxVQUFDLEVBQTJCOztRQUF6QixhQUFVLEVBQVYsS0FBSyxtQkFBRyxFQUFFLEtBQUE7SUFDNUMsSUFBTSxJQUFJLEdBQWtCLEVBQUUsQ0FBQztJQUMvQixJQUFNLFVBQVUsR0FBOEIsRUFBRSxDQUFDOzRCQUN0QyxHQUFHO1FBQ1osSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssZ0JBQWdCLEVBQUU7O1NBRTNDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixVQUFVLENBQUMsR0FBRyxDQUFDLEdBQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUcsQ0FBQztTQUMzRDthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQixVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSztpQkFDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDUixJQUFJLEVBQUU7aUJBQ04sTUFBTSxDQUNMLFVBQUMsT0FBc0IsRUFBRSxLQUFhLElBQUssT0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUcsQ0FBQyxDQUFDLEVBQXpELENBQXlELEVBQ3BHLEVBQUUsQ0FDSDtpQkFDQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZDs7O1FBbEJILEtBQWtCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUEsZ0JBQUE7WUFBdEMsSUFBTSxHQUFHLFdBQUE7b0JBQUgsR0FBRztTQW1CYjs7Ozs7Ozs7O0lBRUQsT0FBTyxJQUFJO1NBQ1IsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFmLENBQWUsQ0FBQztTQUM3QixNQUFNLENBQUMsVUFBQyxVQUFVLElBQUssT0FBQSxVQUFVLEVBQVYsQ0FBVSxDQUFDLENBQUMsd0JBQXdCO1NBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBlc2NhcGVVcmkgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11cmktZXNjYXBlXCI7XG5cbmltcG9ydCB7IFNJR05BVFVSRV9IRUFERVIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0Q2Fub25pY2FsUXVlcnkgPSAoeyBxdWVyeSA9IHt9IH06IEh0dHBSZXF1ZXN0KTogc3RyaW5nID0+IHtcbiAgY29uc3Qga2V5czogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICBjb25zdCBzZXJpYWxpemVkOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJ5KS5zb3J0KCkpIHtcbiAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IFNJR05BVFVSRV9IRUFERVIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGtleXMucHVzaChrZXkpO1xuICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBgJHtlc2NhcGVVcmkoa2V5KX09JHtlc2NhcGVVcmkodmFsdWUpfWA7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsdWVcbiAgICAgICAgLnNsaWNlKDApXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShcbiAgICAgICAgICAoZW5jb2RlZDogQXJyYXk8c3RyaW5nPiwgdmFsdWU6IHN0cmluZykgPT4gZW5jb2RlZC5jb25jYXQoW2Ake2VzY2FwZVVyaShrZXkpfT0ke2VzY2FwZVVyaSh2YWx1ZSl9YF0pLFxuICAgICAgICAgIFtdXG4gICAgICAgIClcbiAgICAgICAgLmpvaW4oXCImXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBrZXlzXG4gICAgLm1hcCgoa2V5KSA9PiBzZXJpYWxpemVkW2tleV0pXG4gICAgLmZpbHRlcigoc2VyaWFsaXplZCkgPT4gc2VyaWFsaXplZCkgLy8gb21pdCBhbnkgZmFsc3kgdmFsdWVzXG4gICAgLmpvaW4oXCImXCIpO1xufTtcbiJdfQ==