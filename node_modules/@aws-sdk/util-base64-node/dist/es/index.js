import { fromArrayBuffer, fromString } from "@aws-sdk/util-buffer-from";
var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
/**
 * Converts a base-64 encoded string to a Uint8Array of bytes using Node.JS's
 * `buffer` module.
 *
 * @param input The base-64 encoded string
 */
export function fromBase64(input) {
    // Node's buffer module allows padding to be omitted, but we want to enforce
    // it. So here we ensure that the input represents a number of bits divisible
    // by 8. Each character represents 6 bits, so after reducing the fraction we
    // end up mulitplying by 3/4 and checking for a remainder.
    if ((input.length * 3) % 4 !== 0) {
        throw new TypeError("Incorrect padding on base64 string.");
    }
    // Node will just ingore invalid characters, so we need to make sure they're
    // properly rejected.
    if (!BASE64_REGEX.exec(input)) {
        throw new TypeError("Invalid base64 string.");
    }
    var buffer = fromString(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
}
/**
 * Converts a Uint8Array of binary data to a base-64 encoded string using
 * Node.JS's `buffer` module.
 *
 * @param input The binary data to encode
 */
export function toBase64(input) {
    return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxJQUFNLFlBQVksR0FBRyx3QkFBd0IsQ0FBQztBQUU5Qzs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBYTtJQUN0Qyw0RUFBNEU7SUFDNUUsNkVBQTZFO0lBQzdFLDRFQUE0RTtJQUM1RSwwREFBMEQ7SUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNoQyxNQUFNLElBQUksU0FBUyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDNUQ7SUFFRCw0RUFBNEU7SUFDNUUscUJBQXFCO0lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUMvQztJQUVELElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFM0MsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBaUI7SUFDeEMsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21BcnJheUJ1ZmZlciwgZnJvbVN0cmluZyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWJ1ZmZlci1mcm9tXCI7XG5cbmNvbnN0IEJBU0U2NF9SRUdFWCA9IC9eW0EtWmEtejAtOSsvXSo9ezAsMn0kLztcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBVaW50OEFycmF5IG9mIGJ5dGVzIHVzaW5nIE5vZGUuSlMnc1xuICogYGJ1ZmZlcmAgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBpbnB1dCBUaGUgYmFzZS02NCBlbmNvZGVkIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUJhc2U2NChpbnB1dDogc3RyaW5nKTogVWludDhBcnJheSB7XG4gIC8vIE5vZGUncyBidWZmZXIgbW9kdWxlIGFsbG93cyBwYWRkaW5nIHRvIGJlIG9taXR0ZWQsIGJ1dCB3ZSB3YW50IHRvIGVuZm9yY2VcbiAgLy8gaXQuIFNvIGhlcmUgd2UgZW5zdXJlIHRoYXQgdGhlIGlucHV0IHJlcHJlc2VudHMgYSBudW1iZXIgb2YgYml0cyBkaXZpc2libGVcbiAgLy8gYnkgOC4gRWFjaCBjaGFyYWN0ZXIgcmVwcmVzZW50cyA2IGJpdHMsIHNvIGFmdGVyIHJlZHVjaW5nIHRoZSBmcmFjdGlvbiB3ZVxuICAvLyBlbmQgdXAgbXVsaXRwbHlpbmcgYnkgMy80IGFuZCBjaGVja2luZyBmb3IgYSByZW1haW5kZXIuXG4gIGlmICgoaW5wdXQubGVuZ3RoICogMykgJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW5jb3JyZWN0IHBhZGRpbmcgb24gYmFzZTY0IHN0cmluZy5gKTtcbiAgfVxuXG4gIC8vIE5vZGUgd2lsbCBqdXN0IGluZ29yZSBpbnZhbGlkIGNoYXJhY3RlcnMsIHNvIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXkncmVcbiAgLy8gcHJvcGVybHkgcmVqZWN0ZWQuXG4gIGlmICghQkFTRTY0X1JFR0VYLmV4ZWMoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBiYXNlNjQgc3RyaW5nLmApO1xuICB9XG5cbiAgY29uc3QgYnVmZmVyID0gZnJvbVN0cmluZyhpbnB1dCwgXCJiYXNlNjRcIik7XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBVaW50OEFycmF5IG9mIGJpbmFyeSBkYXRhIHRvIGEgYmFzZS02NCBlbmNvZGVkIHN0cmluZyB1c2luZ1xuICogTm9kZS5KUydzIGBidWZmZXJgIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgVGhlIGJpbmFyeSBkYXRhIHRvIGVuY29kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9CYXNlNjQoaW5wdXQ6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG4iXX0=