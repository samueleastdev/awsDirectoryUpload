"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChunkStream = void 0;
const buffer_1 = require("buffer");
async function* getChunkStream(data, partSize, getNextData) {
    let partNumber = 1;
    const currentBuffer = { chunks: [], length: 0 };
    for await (const datum of getNextData(data)) {
        currentBuffer.chunks.push(datum);
        currentBuffer.length += datum.length;
        while (currentBuffer.length >= partSize) {
            /**
             * Concat all the buffers together once if there is more than one to concat. Attempt
             * to minimize concats as Buffer.Concat is an extremely expensive operation.
             */
            const dataChunk = currentBuffer.chunks.length > 1 ? buffer_1.Buffer.concat(currentBuffer.chunks) : currentBuffer.chunks[0];
            yield {
                partNumber,
                data: dataChunk.slice(0, partSize),
            };
            // Reset the buffer.
            currentBuffer.chunks = [dataChunk.slice(partSize)];
            currentBuffer.length = currentBuffer.chunks[0].length;
            partNumber += 1;
        }
    }
    yield {
        partNumber,
        data: buffer_1.Buffer.concat(currentBuffer.chunks),
        lastPart: true,
    };
}
exports.getChunkStream = getChunkStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2h1bmtTdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2h1bmtzL2dldENodW5rU3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1DQUFnQztBQU96QixLQUFLLFNBQVMsQ0FBQyxDQUFDLGNBQWMsQ0FDbkMsSUFBTyxFQUNQLFFBQWdCLEVBQ2hCLFdBQWdEO0lBRWhELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixNQUFNLGFBQWEsR0FBWSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBRXpELElBQUksS0FBSyxFQUFFLE1BQU0sS0FBSyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxhQUFhLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFFckMsT0FBTyxhQUFhLENBQUMsTUFBTSxJQUFJLFFBQVEsRUFBRTtZQUN2Qzs7O2VBR0c7WUFDSCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWxILE1BQU07Z0JBQ0osVUFBVTtnQkFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDO2FBQ25DLENBQUM7WUFFRixvQkFBb0I7WUFDcEIsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuRCxhQUFhLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3RELFVBQVUsSUFBSSxDQUFDLENBQUM7U0FDakI7S0FDRjtJQUNELE1BQU07UUFDSixVQUFVO1FBQ1YsSUFBSSxFQUFFLGVBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUN6QyxRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUM7QUFDSixDQUFDO0FBbkNELHdDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0RhdGFQYXJ0IH0gZnJvbSBcIi4uL1VwbG9hZFwiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlclwiO1xuXG5pbnRlcmZhY2UgQnVmZmVycyB7XG4gIGNodW5rczogQnVmZmVyW107XG4gIGxlbmd0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGdldENodW5rU3RyZWFtPFQ+KFxuICBkYXRhOiBULFxuICBwYXJ0U2l6ZTogbnVtYmVyLFxuICBnZXROZXh0RGF0YTogKGRhdGE6IFQpID0+IEFzeW5jR2VuZXJhdG9yPEJ1ZmZlcj5cbik6IEFzeW5jR2VuZXJhdG9yPFJhd0RhdGFQYXJ0LCB2b2lkLCB1bmRlZmluZWQ+IHtcbiAgbGV0IHBhcnROdW1iZXIgPSAxO1xuICBjb25zdCBjdXJyZW50QnVmZmVyOiBCdWZmZXJzID0geyBjaHVua3M6IFtdLCBsZW5ndGg6IDAgfTtcblxuICBmb3IgYXdhaXQgKGNvbnN0IGRhdHVtIG9mIGdldE5leHREYXRhKGRhdGEpKSB7XG4gICAgY3VycmVudEJ1ZmZlci5jaHVua3MucHVzaChkYXR1bSk7XG4gICAgY3VycmVudEJ1ZmZlci5sZW5ndGggKz0gZGF0dW0ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRCdWZmZXIubGVuZ3RoID49IHBhcnRTaXplKSB7XG4gICAgICAvKipcbiAgICAgICAqIENvbmNhdCBhbGwgdGhlIGJ1ZmZlcnMgdG9nZXRoZXIgb25jZSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHRvIGNvbmNhdC4gQXR0ZW1wdFxuICAgICAgICogdG8gbWluaW1pemUgY29uY2F0cyBhcyBCdWZmZXIuQ29uY2F0IGlzIGFuIGV4dHJlbWVseSBleHBlbnNpdmUgb3BlcmF0aW9uLlxuICAgICAgICovXG4gICAgICBjb25zdCBkYXRhQ2h1bmsgPSBjdXJyZW50QnVmZmVyLmNodW5rcy5sZW5ndGggPiAxID8gQnVmZmVyLmNvbmNhdChjdXJyZW50QnVmZmVyLmNodW5rcykgOiBjdXJyZW50QnVmZmVyLmNodW5rc1swXTtcblxuICAgICAgeWllbGQge1xuICAgICAgICBwYXJ0TnVtYmVyLFxuICAgICAgICBkYXRhOiBkYXRhQ2h1bmsuc2xpY2UoMCwgcGFydFNpemUpLFxuICAgICAgfTtcblxuICAgICAgLy8gUmVzZXQgdGhlIGJ1ZmZlci5cbiAgICAgIGN1cnJlbnRCdWZmZXIuY2h1bmtzID0gW2RhdGFDaHVuay5zbGljZShwYXJ0U2l6ZSldO1xuICAgICAgY3VycmVudEJ1ZmZlci5sZW5ndGggPSBjdXJyZW50QnVmZmVyLmNodW5rc1swXS5sZW5ndGg7XG4gICAgICBwYXJ0TnVtYmVyICs9IDE7XG4gICAgfVxuICB9XG4gIHlpZWxkIHtcbiAgICBwYXJ0TnVtYmVyLFxuICAgIGRhdGE6IEJ1ZmZlci5jb25jYXQoY3VycmVudEJ1ZmZlci5jaHVua3MpLFxuICAgIGxhc3RQYXJ0OiB0cnVlLFxuICB9O1xufVxuIl19