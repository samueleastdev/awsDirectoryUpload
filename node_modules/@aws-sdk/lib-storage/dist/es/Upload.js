import { __assign, __asyncValues, __awaiter, __extends, __generator } from "tslib";
import { CompleteMultipartUploadCommand, CreateMultipartUploadCommand, PutObjectCommand, PutObjectTaggingCommand, UploadPartCommand, } from "@aws-sdk/client-s3";
import { EventEmitter } from "events";
import { getChunk } from "./chunker";
import { byteLength } from "./bytelength";
import { AbortController } from "@aws-sdk/abort-controller";
var MIN_PART_SIZE = 1024 * 1024 * 5;
var Upload = /** @class */ (function (_super) {
    __extends(Upload, _super);
    function Upload(options) {
        var _this = _super.call(this) || this;
        /**
         * S3 multipart upload does not allow more than 10000 parts.
         */
        _this.MAX_PARTS = 10000;
        // Defaults.
        _this.queueSize = 4;
        _this.partSize = MIN_PART_SIZE;
        _this.leavePartsOnError = false;
        _this.tags = [];
        _this.concurrentUploaders = [];
        _this.uploadedParts = [];
        _this.isMultiPart = true;
        // set defaults from options.
        _this.queueSize = options.queueSize || _this.queueSize;
        _this.partSize = options.partSize || _this.partSize;
        _this.leavePartsOnError = options.leavePartsOnError || _this.leavePartsOnError;
        _this.tags = options.tags || _this.tags;
        _this.client = options.client;
        _this.params = options.params;
        _this.__validateInput();
        // set progress defaults
        _this.totalBytes = byteLength(_this.params.Body);
        _this.bytesUploadedSoFar = 0;
        _this.abortController = new AbortController();
        return _this;
    }
    Upload.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                /**
                 * Abort stops all new uploads and immediately exists the top level promise on this.done()
                 * Concurrent threads in flight clean up eventually.
                 */
                this.abortController.abort();
                return [2 /*return*/];
            });
        });
    };
    Upload.prototype.done = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.race([this.__doMultipartUpload(), this.__abortTimeout(this.abortController.signal)])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Upload.prototype.on = function (event, listener) {
        this.uploadEvent = event;
        _super.prototype.on.call(this, event, listener);
    };
    Upload.prototype.__uploadUsingPut = function (dataPart) {
        return __awaiter(this, void 0, void 0, function () {
            var params, putResult, totalSize;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isMultiPart = false;
                        params = __assign(__assign({}, this.params), { Body: dataPart.data });
                        return [4 /*yield*/, this.client.send(new PutObjectCommand(params))];
                    case 1:
                        putResult = _a.sent();
                        this.putResponse = putResult;
                        totalSize = byteLength(dataPart.data);
                        this.__notifyProgress({
                            loaded: totalSize,
                            total: totalSize,
                            part: 1,
                            Key: this.params.Key,
                            Bucket: this.params.Bucket,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Upload.prototype.__createMultipartUpload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var createCommandParams, createMultipartUploadResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.createMultiPartPromise) {
                            createCommandParams = __assign(__assign({}, this.params), { Body: undefined });
                            this.createMultiPartPromise = this.client.send(new CreateMultipartUploadCommand(createCommandParams));
                        }
                        return [4 /*yield*/, this.createMultiPartPromise];
                    case 1:
                        createMultipartUploadResult = _a.sent();
                        this.uploadId = createMultipartUploadResult.UploadId;
                        return [2 /*return*/];
                }
            });
        });
    };
    Upload.prototype.__doConcurrentUpload = function (dataFeeder) {
        var dataFeeder_1, dataFeeder_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var dataPart, partResult, e_2, e_1_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 12, 13, 18]);
                        dataFeeder_1 = __asyncValues(dataFeeder);
                        _b.label = 1;
                    case 1: return [4 /*yield*/, dataFeeder_1.next()];
                    case 2:
                        if (!(dataFeeder_1_1 = _b.sent(), !dataFeeder_1_1.done)) return [3 /*break*/, 11];
                        dataPart = dataFeeder_1_1.value;
                        if (this.uploadedParts.length > this.MAX_PARTS) {
                            throw new Error("Exceeded " + this.MAX_PARTS + " as part of the upload to " + this.params.Key + " and " + this.params.Bucket + ".");
                        }
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 9, , 10]);
                        if (this.abortController.signal.aborted) {
                            return [2 /*return*/];
                        }
                        if (!(dataPart.partNumber === 1 && dataPart.lastPart)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.__uploadUsingPut(dataPart)];
                    case 4: return [2 /*return*/, _b.sent()];
                    case 5:
                        if (!!this.uploadId) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.__createMultipartUpload()];
                    case 6:
                        _b.sent();
                        if (this.abortController.signal.aborted) {
                            return [2 /*return*/];
                        }
                        _b.label = 7;
                    case 7: return [4 /*yield*/, this.client.send(new UploadPartCommand(__assign(__assign({}, this.params), { UploadId: this.uploadId, Body: dataPart.data, PartNumber: dataPart.partNumber })))];
                    case 8:
                        partResult = _b.sent();
                        if (this.abortController.signal.aborted) {
                            return [2 /*return*/];
                        }
                        this.uploadedParts.push({
                            PartNumber: dataPart.partNumber,
                            ETag: partResult.ETag,
                        });
                        this.bytesUploadedSoFar += byteLength(dataPart.data);
                        this.__notifyProgress({
                            loaded: this.bytesUploadedSoFar,
                            total: this.totalBytes,
                            part: dataPart.partNumber,
                            Key: this.params.Key,
                            Bucket: this.params.Bucket,
                        });
                        return [3 /*break*/, 10];
                    case 9:
                        e_2 = _b.sent();
                        // Failed to create multi-part or put
                        if (!this.uploadId) {
                            throw e_2;
                        }
                        // on leavePartsOnError throw an error so users can deal with it themselves,
                        // otherwise swallow the error.
                        if (this.leavePartsOnError) {
                            throw e_2;
                        }
                        return [3 /*break*/, 10];
                    case 10: return [3 /*break*/, 1];
                    case 11: return [3 /*break*/, 18];
                    case 12:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 18];
                    case 13:
                        _b.trys.push([13, , 16, 17]);
                        if (!(dataFeeder_1_1 && !dataFeeder_1_1.done && (_a = dataFeeder_1.return))) return [3 /*break*/, 15];
                        return [4 /*yield*/, _a.call(dataFeeder_1)];
                    case 14:
                        _b.sent();
                        _b.label = 15;
                    case 15: return [3 /*break*/, 17];
                    case 16:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 17: return [7 /*endfinally*/];
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    Upload.prototype.__doMultipartUpload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dataFeeder, index, currentUpload, result, uploadCompleteParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataFeeder = getChunk(this.params.Body, this.partSize);
                        // Create and start concurrent uploads.
                        for (index = 0; index < this.queueSize; index++) {
                            currentUpload = this.__doConcurrentUpload(dataFeeder);
                            this.concurrentUploaders.push(currentUpload);
                        }
                        // Create and start concurrent uploads.
                        return [4 /*yield*/, Promise.all(this.concurrentUploaders)];
                    case 1:
                        // Create and start concurrent uploads.
                        _a.sent();
                        if (this.abortController.signal.aborted) {
                            throw Object.assign(new Error("Upload aborted."), { name: "AbortError" });
                        }
                        if (!this.isMultiPart) return [3 /*break*/, 3];
                        this.uploadedParts.sort(function (a, b) { return a.PartNumber - b.PartNumber; });
                        uploadCompleteParams = __assign(__assign({}, this.params), { Body: undefined, UploadId: this.uploadId, MultipartUpload: {
                                Parts: this.uploadedParts,
                            } });
                        return [4 /*yield*/, this.client.send(new CompleteMultipartUploadCommand(uploadCompleteParams))];
                    case 2:
                        result = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        result = this.putResponse;
                        _a.label = 4;
                    case 4:
                        if (!this.tags.length) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.client.send(new PutObjectTaggingCommand(__assign(__assign({}, this.params), { Tagging: {
                                    TagSet: this.tags,
                                } })))];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, result];
                }
            });
        });
    };
    Upload.prototype.__notifyProgress = function (progress) {
        if (this.uploadEvent) {
            this.emit(this.uploadEvent, progress);
        }
    };
    Upload.prototype.__abortTimeout = function (abortSignal) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        abortSignal.onabort = function () {
                            var abortError = new Error("Upload aborted.");
                            abortError.name = "AbortError";
                            reject(abortError);
                        };
                    })];
            });
        });
    };
    Upload.prototype.__validateInput = function () {
        if (!this.params) {
            throw new Error("InputError: Upload requires params to be passed to upload.");
        }
        if (!this.client) {
            throw new Error("InputError: Upload requires a AWS client to do uploads with.");
        }
        if (this.partSize < MIN_PART_SIZE) {
            throw new Error("EntityTooSmall: Your proposed upload partsize [" + this.partSize + "] is smaller than the minimum allowed size [" + MIN_PART_SIZE + "] (5MB)");
        }
        if (this.queueSize < 1) {
            throw new Error("Queue size: Must have at least one uploading queue.");
        }
    };
    return Upload;
}(EventEmitter));
export { Upload };
//# sourceMappingURL=data:application/json;base64,