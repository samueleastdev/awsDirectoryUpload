import { __asyncGenerator, __asyncValues, __await, __generator } from "tslib";
import { Buffer } from "buffer";
export function getChunkStream(data, partSize, getNextData) {
    return __asyncGenerator(this, arguments, function getChunkStream_1() {
        var partNumber, currentBuffer, _a, _b, datum, dataChunk, e_1_1;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    partNumber = 1;
                    currentBuffer = { chunks: [], length: 0 };
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 9, 10, 15]);
                    _a = __asyncValues(getNextData(data));
                    _d.label = 2;
                case 2: return [4 /*yield*/, __await(_a.next())];
                case 3:
                    if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];
                    datum = _b.value;
                    currentBuffer.chunks.push(datum);
                    currentBuffer.length += datum.length;
                    _d.label = 4;
                case 4:
                    if (!(currentBuffer.length >= partSize)) return [3 /*break*/, 7];
                    dataChunk = currentBuffer.chunks.length > 1 ? Buffer.concat(currentBuffer.chunks) : currentBuffer.chunks[0];
                    return [4 /*yield*/, __await({
                            partNumber: partNumber,
                            data: dataChunk.slice(0, partSize),
                        })];
                case 5: return [4 /*yield*/, _d.sent()];
                case 6:
                    _d.sent();
                    // Reset the buffer.
                    currentBuffer.chunks = [dataChunk.slice(partSize)];
                    currentBuffer.length = currentBuffer.chunks[0].length;
                    partNumber += 1;
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 2];
                case 8: return [3 /*break*/, 15];
                case 9:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 15];
                case 10:
                    _d.trys.push([10, , 13, 14]);
                    if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                    return [4 /*yield*/, __await(_c.call(_a))];
                case 11:
                    _d.sent();
                    _d.label = 12;
                case 12: return [3 /*break*/, 14];
                case 13:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 14: return [7 /*endfinally*/];
                case 15: return [4 /*yield*/, __await({
                        partNumber: partNumber,
                        data: Buffer.concat(currentBuffer.chunks),
                        lastPart: true,
                    })];
                case 16: return [4 /*yield*/, _d.sent()];
                case 17:
                    _d.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2h1bmtTdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2h1bmtzL2dldENodW5rU3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBT2hDLE1BQU0sVUFBaUIsY0FBYyxDQUNuQyxJQUFPLEVBQ1AsUUFBZ0IsRUFDaEIsV0FBZ0Q7Ozs7Ozs7b0JBRTVDLFVBQVUsR0FBRyxDQUFDLENBQUM7b0JBQ2IsYUFBYSxHQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7Ozs7b0JBRS9CLEtBQUEsY0FBQSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7Ozs7O29CQUExQixLQUFLLFdBQUEsQ0FBQTtvQkFDcEIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2pDLGFBQWEsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQzs7O3lCQUU5QixDQUFBLGFBQWEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFBO29CQUsvQixTQUFTLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztpREFFNUc7NEJBQ0osVUFBVSxZQUFBOzRCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUM7eUJBQ25DO3dCQUhELGdDQUdDOztvQkFIRCxTQUdDLENBQUM7b0JBRUYsb0JBQW9CO29CQUNwQixhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNuRCxhQUFhLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO29CQUN0RCxVQUFVLElBQUksQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREFHZDt3QkFDSixVQUFVLFlBQUE7d0JBQ1YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQzt3QkFDekMsUUFBUSxFQUFFLElBQUk7cUJBQ2Y7eUJBSkQsZ0NBSUM7O29CQUpELFNBSUMsQ0FBQzs7Ozs7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0RhdGFQYXJ0IH0gZnJvbSBcIi4uL1VwbG9hZFwiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlclwiO1xuXG5pbnRlcmZhY2UgQnVmZmVycyB7XG4gIGNodW5rczogQnVmZmVyW107XG4gIGxlbmd0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGdldENodW5rU3RyZWFtPFQ+KFxuICBkYXRhOiBULFxuICBwYXJ0U2l6ZTogbnVtYmVyLFxuICBnZXROZXh0RGF0YTogKGRhdGE6IFQpID0+IEFzeW5jR2VuZXJhdG9yPEJ1ZmZlcj5cbik6IEFzeW5jR2VuZXJhdG9yPFJhd0RhdGFQYXJ0LCB2b2lkLCB1bmRlZmluZWQ+IHtcbiAgbGV0IHBhcnROdW1iZXIgPSAxO1xuICBjb25zdCBjdXJyZW50QnVmZmVyOiBCdWZmZXJzID0geyBjaHVua3M6IFtdLCBsZW5ndGg6IDAgfTtcblxuICBmb3IgYXdhaXQgKGNvbnN0IGRhdHVtIG9mIGdldE5leHREYXRhKGRhdGEpKSB7XG4gICAgY3VycmVudEJ1ZmZlci5jaHVua3MucHVzaChkYXR1bSk7XG4gICAgY3VycmVudEJ1ZmZlci5sZW5ndGggKz0gZGF0dW0ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRCdWZmZXIubGVuZ3RoID49IHBhcnRTaXplKSB7XG4gICAgICAvKipcbiAgICAgICAqIENvbmNhdCBhbGwgdGhlIGJ1ZmZlcnMgdG9nZXRoZXIgb25jZSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHRvIGNvbmNhdC4gQXR0ZW1wdFxuICAgICAgICogdG8gbWluaW1pemUgY29uY2F0cyBhcyBCdWZmZXIuQ29uY2F0IGlzIGFuIGV4dHJlbWVseSBleHBlbnNpdmUgb3BlcmF0aW9uLlxuICAgICAgICovXG4gICAgICBjb25zdCBkYXRhQ2h1bmsgPSBjdXJyZW50QnVmZmVyLmNodW5rcy5sZW5ndGggPiAxID8gQnVmZmVyLmNvbmNhdChjdXJyZW50QnVmZmVyLmNodW5rcykgOiBjdXJyZW50QnVmZmVyLmNodW5rc1swXTtcblxuICAgICAgeWllbGQge1xuICAgICAgICBwYXJ0TnVtYmVyLFxuICAgICAgICBkYXRhOiBkYXRhQ2h1bmsuc2xpY2UoMCwgcGFydFNpemUpLFxuICAgICAgfTtcblxuICAgICAgLy8gUmVzZXQgdGhlIGJ1ZmZlci5cbiAgICAgIGN1cnJlbnRCdWZmZXIuY2h1bmtzID0gW2RhdGFDaHVuay5zbGljZShwYXJ0U2l6ZSldO1xuICAgICAgY3VycmVudEJ1ZmZlci5sZW5ndGggPSBjdXJyZW50QnVmZmVyLmNodW5rc1swXS5sZW5ndGg7XG4gICAgICBwYXJ0TnVtYmVyICs9IDE7XG4gICAgfVxuICB9XG4gIHlpZWxkIHtcbiAgICBwYXJ0TnVtYmVyLFxuICAgIGRhdGE6IEJ1ZmZlci5jb25jYXQoY3VycmVudEJ1ZmZlci5jaHVua3MpLFxuICAgIGxhc3RQYXJ0OiB0cnVlLFxuICB9O1xufVxuIl19