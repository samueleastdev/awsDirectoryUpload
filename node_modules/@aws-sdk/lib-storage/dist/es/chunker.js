import { Readable } from "stream";
import { Buffer } from "buffer";
import { getChunkBuffer } from "./chunks/getChunkBuffer";
import { getChunkStream } from "./chunks/getChunkStream";
import { getDataReadableStream } from "./chunks/getDataReadableStream";
import { getDataReadable } from "./chunks/getDataReadable";
export var getChunk = function (data, partSize) {
    if (data instanceof Buffer) {
        return getChunkBuffer(data, partSize);
    }
    else if (data instanceof Readable) {
        return getChunkStream(data, partSize, getDataReadable);
    }
    else if (data instanceof String || typeof data === "string" || data instanceof Uint8Array) {
        // chunk Strings, Uint8Array.
        return getChunkBuffer(Buffer.from(data), partSize);
    }
    if (typeof data.stream === "function") {
        // approximate support for Blobs.
        return getChunkStream(data.stream(), partSize, getDataReadableStream);
    }
    else if (data instanceof ReadableStream) {
        return getChunkStream(data, partSize, getDataReadableStream);
    }
    else {
        throw new Error("Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaHVua2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdoQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsVUFBQyxJQUFtQixFQUFFLFFBQWdCO0lBQzVELElBQUksSUFBSSxZQUFZLE1BQU0sRUFBRTtRQUMxQixPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDdkM7U0FBTSxJQUFJLElBQUksWUFBWSxRQUFRLEVBQUU7UUFDbkMsT0FBTyxjQUFjLENBQVcsSUFBSSxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUNsRTtTQUFNLElBQUksSUFBSSxZQUFZLE1BQU0sSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxZQUFZLFVBQVUsRUFBRTtRQUMzRiw2QkFBNkI7UUFDN0IsT0FBTyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNwRDtJQUNELElBQUksT0FBUSxJQUFZLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtRQUM5QyxpQ0FBaUM7UUFDakMsT0FBTyxjQUFjLENBQWtCLElBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUNoRztTQUFNLElBQUksSUFBSSxZQUFZLGNBQWMsRUFBRTtRQUN6QyxPQUFPLGNBQWMsQ0FBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzlFO1NBQU07UUFDTCxNQUFNLElBQUksS0FBSyxDQUNiLGdJQUFnSSxDQUNqSSxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXJcIjtcblxuaW1wb3J0IHsgQm9keURhdGFUeXBlcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRDaHVua0J1ZmZlciB9IGZyb20gXCIuL2NodW5rcy9nZXRDaHVua0J1ZmZlclwiO1xuaW1wb3J0IHsgZ2V0Q2h1bmtTdHJlYW0gfSBmcm9tIFwiLi9jaHVua3MvZ2V0Q2h1bmtTdHJlYW1cIjtcbmltcG9ydCB7IGdldERhdGFSZWFkYWJsZVN0cmVhbSB9IGZyb20gXCIuL2NodW5rcy9nZXREYXRhUmVhZGFibGVTdHJlYW1cIjtcbmltcG9ydCB7IGdldERhdGFSZWFkYWJsZSB9IGZyb20gXCIuL2NodW5rcy9nZXREYXRhUmVhZGFibGVcIjtcblxuZXhwb3J0IGNvbnN0IGdldENodW5rID0gKGRhdGE6IEJvZHlEYXRhVHlwZXMsIHBhcnRTaXplOiBudW1iZXIpID0+IHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICByZXR1cm4gZ2V0Q2h1bmtCdWZmZXIoZGF0YSwgcGFydFNpemUpO1xuICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBSZWFkYWJsZSkge1xuICAgIHJldHVybiBnZXRDaHVua1N0cmVhbTxSZWFkYWJsZT4oZGF0YSwgcGFydFNpemUsIGdldERhdGFSZWFkYWJsZSk7XG4gIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiB8fCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIC8vIGNodW5rIFN0cmluZ3MsIFVpbnQ4QXJyYXkuXG4gICAgcmV0dXJuIGdldENodW5rQnVmZmVyKEJ1ZmZlci5mcm9tKGRhdGEpLCBwYXJ0U2l6ZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiAoZGF0YSBhcyBhbnkpLnN0cmVhbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gYXBwcm94aW1hdGUgc3VwcG9ydCBmb3IgQmxvYnMuXG4gICAgcmV0dXJuIGdldENodW5rU3RyZWFtPFJlYWRhYmxlU3RyZWFtPigoZGF0YSBhcyBhbnkpLnN0cmVhbSgpLCBwYXJ0U2l6ZSwgZ2V0RGF0YVJlYWRhYmxlU3RyZWFtKTtcbiAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZ2V0Q2h1bmtTdHJlYW08UmVhZGFibGVTdHJlYW0+KGRhdGEsIHBhcnRTaXplLCBnZXREYXRhUmVhZGFibGVTdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQm9keSBEYXRhIGlzIHVuc3VwcG9ydGVkIGZvcm1hdCwgZXhwZWN0ZWQgZGF0YSB0byBiZSBvbmUgb2Y6IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBSZWFkYWJsZSB8IFJlYWRhYmxlU3RyZWFtIHwgQmxvYjsuXCJcbiAgICApO1xuICB9XG59O1xuIl19