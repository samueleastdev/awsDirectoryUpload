import { __assign, __awaiter, __generator } from "tslib";
import { AdaptiveRetryStrategy } from "./AdaptiveRetryStrategy";
import { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from "./config";
import { StandardRetryStrategy } from "./StandardRetryStrategy";
export var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
export var CONFIG_MAX_ATTEMPTS = "max_attempts";
export var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: function (env) {
        var value = env[ENV_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error("Environment variable " + ENV_MAX_ATTEMPTS + " mast be a number, got \"" + value + "\"");
        }
        return maxAttempt;
    },
    configFileSelector: function (profile) {
        var value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error("Shared config file entry " + CONFIG_MAX_ATTEMPTS + " mast be a number, got \"" + value + "\"");
        }
        return maxAttempt;
    },
    default: DEFAULT_MAX_ATTEMPTS,
};
export var resolveRetryConfig = function (input) {
    var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
    return __assign(__assign({}, input), { maxAttempts: maxAttempts, retryStrategy: function () { return __awaiter(void 0, void 0, void 0, function () {
            var retryMode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (input.retryStrategy) {
                            return [2 /*return*/, input.retryStrategy];
                        }
                        return [4 /*yield*/, getRetryMode(input.retryMode)];
                    case 1:
                        retryMode = _a.sent();
                        if (retryMode === RETRY_MODES.ADAPTIVE) {
                            return [2 /*return*/, new AdaptiveRetryStrategy(maxAttempts)];
                        }
                        return [2 /*return*/, new StandardRetryStrategy(maxAttempts)];
                }
            });
        }); } });
};
var getRetryMode = function (retryMode) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (typeof retryMode === "string") {
                    return [2 /*return*/, retryMode];
                }
                return [4 /*yield*/, retryMode()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
var normalizeMaxAttempts = function (maxAttempts) {
    if (maxAttempts === void 0) { maxAttempts = DEFAULT_MAX_ATTEMPTS; }
    if (typeof maxAttempts === "number") {
        var promisified_1 = Promise.resolve(maxAttempts);
        return function () { return promisified_1; };
    }
    return maxAttempts;
};
export var ENV_RETRY_MODE = "AWS_RETRY_MODE";
export var CONFIG_RETRY_MODE = "retry_mode";
export var NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: function (env) { return env[ENV_RETRY_MODE]; },
    configFileSelector: function (profile) { return profile[CONFIG_RETRY_MODE]; },
    default: DEFAULT_RETRY_MODE,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlndXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEUsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsY0FBYyxDQUFDO0FBRWxELE1BQU0sQ0FBQyxJQUFNLCtCQUErQixHQUFrQztJQUM1RSwyQkFBMkIsRUFBRSxVQUFDLEdBQUc7UUFDL0IsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUM3QixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQXdCLGdCQUFnQixpQ0FBMkIsS0FBSyxPQUFHLENBQUMsQ0FBQztTQUM5RjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxrQkFBa0IsRUFBRSxVQUFDLE9BQU87UUFDMUIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUM3QixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQTRCLG1CQUFtQixpQ0FBMkIsS0FBSyxPQUFHLENBQUMsQ0FBQztTQUNyRztRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxPQUFPLEVBQUUsb0JBQW9CO0NBQzlCLENBQUM7QUFnQ0YsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsVUFBSSxLQUFnRDtJQUNwRixJQUFNLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsNkJBQ0ssS0FBSyxLQUNSLFdBQVcsYUFBQSxFQUNYLGFBQWEsRUFBRTs7Ozs7d0JBQ2IsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFOzRCQUN2QixzQkFBTyxLQUFLLENBQUMsYUFBYSxFQUFDO3lCQUM1Qjt3QkFDaUIscUJBQU0sWUFBWSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQTs7d0JBQS9DLFNBQVMsR0FBRyxTQUFtQzt3QkFDckQsSUFBSSxTQUFTLEtBQUssV0FBVyxDQUFDLFFBQVEsRUFBRTs0QkFDdEMsc0JBQU8sSUFBSSxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsRUFBQzt5QkFDL0M7d0JBQ0Qsc0JBQU8sSUFBSSxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsRUFBQzs7O2FBQy9DLElBQ0Q7QUFDSixDQUFDLENBQUM7QUFFRixJQUFNLFlBQVksR0FBRyxVQUFPLFNBQW9DOzs7O2dCQUM5RCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtvQkFDakMsc0JBQU8sU0FBUyxFQUFDO2lCQUNsQjtnQkFDTSxxQkFBTSxTQUFTLEVBQUUsRUFBQTtvQkFBeEIsc0JBQU8sU0FBaUIsRUFBQzs7O0tBQzFCLENBQUM7QUFFRixJQUFNLG9CQUFvQixHQUFHLFVBQUMsV0FBNkQ7SUFBN0QsNEJBQUEsRUFBQSxrQ0FBNkQ7SUFDekYsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsSUFBTSxhQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRCxPQUFPLGNBQU0sT0FBQSxhQUFXLEVBQVgsQ0FBVyxDQUFDO0tBQzFCO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDO0FBQy9DLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLFlBQVksQ0FBQztBQUU5QyxNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBa0M7SUFDM0UsMkJBQTJCLEVBQUUsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQW5CLENBQW1CO0lBQ3pELGtCQUFrQixFQUFFLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQTFCLENBQTBCO0lBQzNELE9BQU8sRUFBRSxrQkFBa0I7Q0FDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvYWRlZENvbmZpZ1NlbGVjdG9ycyB9IGZyb20gXCJAYXdzLXNkay9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgUHJvdmlkZXIsIFJldHJ5U3RyYXRlZ3kgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4vQWRhcHRpdmVSZXRyeVN0cmF0ZWd5XCI7XG5pbXBvcnQgeyBERUZBVUxUX01BWF9BVFRFTVBUUywgREVGQVVMVF9SRVRSWV9NT0RFLCBSRVRSWV9NT0RFUyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4vU3RhbmRhcmRSZXRyeVN0cmF0ZWd5XCI7XG5cbmV4cG9ydCBjb25zdCBFTlZfTUFYX0FUVEVNUFRTID0gXCJBV1NfTUFYX0FUVEVNUFRTXCI7XG5leHBvcnQgY29uc3QgQ09ORklHX01BWF9BVFRFTVBUUyA9IFwibWF4X2F0dGVtcHRzXCI7XG5cbmV4cG9ydCBjb25zdCBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TOiBMb2FkZWRDb25maWdTZWxlY3RvcnM8bnVtYmVyPiA9IHtcbiAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBlbnZbRU5WX01BWF9BVFRFTVBUU107XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCBtYXhBdHRlbXB0ID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIGlmIChOdW1iZXIuaXNOYU4obWF4QXR0ZW1wdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRW52aXJvbm1lbnQgdmFyaWFibGUgJHtFTlZfTUFYX0FUVEVNUFRTfSBtYXN0IGJlIGEgbnVtYmVyLCBnb3QgXCIke3ZhbHVlfVwiYCk7XG4gICAgfVxuICAgIHJldHVybiBtYXhBdHRlbXB0O1xuICB9LFxuICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBwcm9maWxlW0NPTkZJR19NQVhfQVRURU1QVFNdO1xuICAgIGlmICghdmFsdWUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbWF4QXR0ZW1wdCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1heEF0dGVtcHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNoYXJlZCBjb25maWcgZmlsZSBlbnRyeSAke0NPTkZJR19NQVhfQVRURU1QVFN9IG1hc3QgYmUgYSBudW1iZXIsIGdvdCBcIiR7dmFsdWV9XCJgKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heEF0dGVtcHQ7XG4gIH0sXG4gIGRlZmF1bHQ6IERFRkFVTFRfTUFYX0FUVEVNUFRTLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBSZXRyeUlucHV0Q29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyByZXF1ZXN0cyB0aGF0IGVuY291bnRlciByZXRyeWFibGUgZmFpbHVyZXMgc2hvdWxkIGJlIGF0dGVtcHRlZC5cbiAgICovXG4gIG1heEF0dGVtcHRzPzogbnVtYmVyIHwgUHJvdmlkZXI8bnVtYmVyPjtcbiAgLyoqXG4gICAqIFRoZSBzdHJhdGVneSB0byByZXRyeSB0aGUgcmVxdWVzdC4gVXNpbmcgYnVpbHQtaW4gZXhwb25lbnRpYWwgYmFja29mZiBzdHJhdGVneSBieSBkZWZhdWx0LlxuICAgKi9cbiAgcmV0cnlTdHJhdGVneT86IFJldHJ5U3RyYXRlZ3k7XG59XG5cbmludGVyZmFjZSBQcmV2aW91c2x5UmVzb2x2ZWQge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHByb3ZpZGVyIGZvciByZXRyeSBhbGdvcml0aG0gdG8gdXNlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJldHJ5TW9kZTogc3RyaW5nIHwgUHJvdmlkZXI8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXRyeVJlc29sdmVkQ29uZmlnIHtcbiAgLyoqXG4gICAqIFJlc29sdmVkIHZhbHVlIGZvciBpbnB1dCBjb25maWcge0BsaW5rIFJldHJ5SW5wdXRDb25maWcubWF4QXR0ZW1wdHN9XG4gICAqL1xuICBtYXhBdHRlbXB0czogUHJvdmlkZXI8bnVtYmVyPjtcbiAgLyoqXG4gICAqIFJlc29sdmVkIHZhbHVlIGZvciBpbnB1dCBjb25maWcge0BsaW5rIFJldHJ5SW5wdXRDb25maWcucmV0cnlTdHJhdGVneX1cbiAgICovXG4gIHJldHJ5U3RyYXRlZ3k6IFByb3ZpZGVyPFJldHJ5U3RyYXRlZ3k+O1xufVxuXG5leHBvcnQgY29uc3QgcmVzb2x2ZVJldHJ5Q29uZmlnID0gPFQ+KGlucHV0OiBUICYgUHJldmlvdXNseVJlc29sdmVkICYgUmV0cnlJbnB1dENvbmZpZyk6IFQgJiBSZXRyeVJlc29sdmVkQ29uZmlnID0+IHtcbiAgY29uc3QgbWF4QXR0ZW1wdHMgPSBub3JtYWxpemVNYXhBdHRlbXB0cyhpbnB1dC5tYXhBdHRlbXB0cyk7XG4gIHJldHVybiB7XG4gICAgLi4uaW5wdXQsXG4gICAgbWF4QXR0ZW1wdHMsXG4gICAgcmV0cnlTdHJhdGVneTogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKGlucHV0LnJldHJ5U3RyYXRlZ3kpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJldHJ5U3RyYXRlZ3k7XG4gICAgICB9XG4gICAgICBjb25zdCByZXRyeU1vZGUgPSBhd2FpdCBnZXRSZXRyeU1vZGUoaW5wdXQucmV0cnlNb2RlKTtcbiAgICAgIGlmIChyZXRyeU1vZGUgPT09IFJFVFJZX01PREVTLkFEQVBUSVZFKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzKTtcbiAgICB9LFxuICB9O1xufTtcblxuY29uc3QgZ2V0UmV0cnlNb2RlID0gYXN5bmMgKHJldHJ5TW9kZTogc3RyaW5nIHwgUHJvdmlkZXI8c3RyaW5nPik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGlmICh0eXBlb2YgcmV0cnlNb2RlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHJldHJ5TW9kZTtcbiAgfVxuICByZXR1cm4gYXdhaXQgcmV0cnlNb2RlKCk7XG59O1xuXG5jb25zdCBub3JtYWxpemVNYXhBdHRlbXB0cyA9IChtYXhBdHRlbXB0czogbnVtYmVyIHwgUHJvdmlkZXI8bnVtYmVyPiA9IERFRkFVTFRfTUFYX0FUVEVNUFRTKTogUHJvdmlkZXI8bnVtYmVyPiA9PiB7XG4gIGlmICh0eXBlb2YgbWF4QXR0ZW1wdHMgPT09IFwibnVtYmVyXCIpIHtcbiAgICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShtYXhBdHRlbXB0cyk7XG4gICAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xuICB9XG4gIHJldHVybiBtYXhBdHRlbXB0cztcbn07XG5cbmV4cG9ydCBjb25zdCBFTlZfUkVUUllfTU9ERSA9IFwiQVdTX1JFVFJZX01PREVcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfUkVUUllfTU9ERSA9IFwicmV0cnlfbW9kZVwiO1xuXG5leHBvcnQgY29uc3QgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TOiBMb2FkZWRDb25maWdTZWxlY3RvcnM8c3RyaW5nPiA9IHtcbiAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBlbnZbRU5WX1JFVFJZX01PREVdLFxuICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW0NPTkZJR19SRVRSWV9NT0RFXSxcbiAgZGVmYXVsdDogREVGQVVMVF9SRVRSWV9NT0RFLFxufTtcbiJdfQ==